import React, { Component } from 'react'
import { Text, View, StyleSheet,TouchableOpacity } from 'react-native'
import Autocomplete from 'react-native-autocomplete-input';

// import Fire from '../../../config/Fire'
import firebase from '@firebase/app';
require('firebase/auth');
require('@firebase/database');
require("firebase/firestore");

import Card from '../Card'
import CardSection from '../CardSection'
import SignButton from '../SignButton'
import Button from '../Button'

// var trainsref = database.collection('drivers').doc(currentUser.email)

export default class Search extends Component {
    state = { currentUser: null, driver:false, updated:false, stationNames:[] ,
        query: '',
        query2: '',
        array : ['kamal','sunil','namal'],

    }
    componentWillMount() {
        const { currentUser } = firebase.auth()
        this.setState({ currentUser })
    }
    componentDidMount(){
        var trainsref = database.collection('drivers').doc(this.state.currentUser.email)
        // var getdata = trainsref.get().then(function(doc) {    
        //     if (doc.exists) {
        //         alert('Driver')
        //         setState({
        //             driver:true,
        //             updated:true
        //         })
        //         }
        //     else{
        //         alert('You are a Fucking Passenger')
        //         setState({
        //             updated:true
        //         })
        //         }
        //     }.bind(this)).catch(err => {
        //         // alert('Error getting Data. Check your Connection and try Again');
        //         });
            // getting Train Search
            var database = firebase.firestore()
            var docRef = database.collection("Train").doc("stations");
            docRef.get().then(function(doc) {
            if (doc.exists) {
                this.setState({stationNames: doc.get('Names')})
                
        
            } else {
                // doc.data() will be undefined in this case
                console.log("No such document!");
            }
            }.bind(this)
            ).catch(function(error) {
            console.log("Error getting document:", error);
            });
                
            }  

            


    
    signOutUser = async () => {
        try {
            await firebase.auth().signOut();
            navigate('Login');

        } catch (error) {
            console.log(error);
        }
    }

    navigate=()=>{
        if(this.state.query != '' && this.state.query2 != ''){
        this.props.navigation.navigate('TrainD',{
          startStation: this.state.query,
          endStation  : this.state.query2,
        })
      }else{
        alert('incomplete')
      }
      }
      findStation(query) {
        //method called everytime when we change the value of the input
        if (query === '') {
          //if the query is null then return blank
          return [];
        }
        
        //making a case insensitive regular expression to get similar value from the film json
        const regex = new RegExp(`${query.trim()}`, 'i');
        //return the filtered film array according the query from the input
        return this.state.stationNames.filter(film => film.search(regex) >= 0);

      }

    render() {
        const { query } = this.state;
        const { query2 } = this.state;
        const films = this.findStation(query);
        const films2 = this.findStation(query2);
        const comp = (a, b) => a.toLowerCase().trim() === b.toLowerCase().trim();
        
        const { currentUser } = this.state
        // const curuser = this.state.curuser
        return (
           
                <Card>
            <CardSection>
            <Autocomplete style={{color:'#000',fontSize:18}}
              autoCapitalize="none"
              autoCorrect={false}
              //data to show in suggestion
              data={films.length === 1 && comp(query, films[0]) ? [] : films}
              //default value if you want to set something in input
              defaultValue={query}
              /*onchange of the text changing the state of the query which will trigger
              the findFilm method to show the suggestions*/
              onChangeText={text => this.setState({ query: text })}
              placeholder="Start Station"
              renderItem={(data) => (
                //you can change the view you want to show in suggestion from here
                <TouchableOpacity 
                onPress={() => this.setState({ query: data })}>
                  <Text>
                    {data} 
                  </Text>
                </TouchableOpacity>
              )}
            />
            </CardSection>
            <CardSection>
            {films.length > 0 ? (
                <Text>{this.state.query}</Text>
              ) : (
                <Text>Enter Start Station</Text>
              )}
            </CardSection>
            
            
            
            <CardSection>
            <Autocomplete style={{color:'#000',fontSize:18}}
              autoCapitalize="none"
              autoCorrect={false}
              //data to show in suggestion
              data={films2.length === 1 && comp(query2, films2[0]) ? [] : films2}
              //default value if you want to set something in input
              defaultValue={query2}
              /*onchange of the text changing the state of the query which will trigger
              the findFilm method to show the suggestions*/
              onChangeText={text => this.setState({ query2: text })}
              placeholder="End Station"
              renderItem={(data) => (
                //you can change the view you want to show in suggestion from here
                <TouchableOpacity 
                onPress={() => this.setState({ query2: data })}>
                  <Text>
                    {data} 
                  </Text>
                </TouchableOpacity>
              )}
            />
            </CardSection>
            <CardSection>
            {films2.length > 0 ? (
                <Text>{this.state.query2}</Text>
              ) : (
                <Text>Enter end Station</Text>
              )}
            </CardSection>
            <CardSection>
            <Button onPress={ this.navigate
            }>
                        Look Up
                    </Button>
            </CardSection>
            
            </Card>
                
        )
    }
}
const styles = StyleSheet.create({
    container: {
        flex: 1,
        justifyContent: 'center',
        alignItems: 'center'
    }
})
